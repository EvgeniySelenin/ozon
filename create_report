#%% Отлов топиков, солюшенов, кнопок и сообщений для отчётности
%%time
import json
import pandas as pd

def jsn_param_bg(d, node):
    global dparams
    if type(d) == dict:
        for k in d.keys():
            if k == node:
                if (d[k] != {'groupName': 'RU SC Назад', 'id': 534}) and (d[k] != {'groupName': 'RU SC Спасибо+Главное меню+Назад', 'id': 707}):
                    dparams.append(d[k])
            jsn_param_bg(d[k], node)
    if type(d) == list:
        for k in d: 
            jsn_param_bg(k, node)
            
def jsn_param_nxt(d, node):
    global dparams
    if type(d) == dict:
        for k in d.keys():
            if k == node:
                if d[k].startswith('locals.button_pressed'):
                    dk = d[k].split(" && ")[0]
                    if int(dk[-4:]) not in [3397, 2566, 3395, 3394, 3396]:
                        dparams.append([d['node'], int(dk[-4:])])
            jsn_param_nxt(d[k], node)
    if type(d) == list:
        for k in d:
            jsn_param_nxt(k, node)

jsndict= json.load(open(r'C:\SEG\CB\18122023\chat_seller_bot_export(1).json', 
                        encoding='utf-8'))

gC = jsndict['graphsContent']
dparams_dict_gr = {}
for n in gC.keys():
    dparams = []
    jsn_param_bg(gC[n], 'button_group')
    if dparams != []:
        dparams_dict_gr[n] = dparams

dparams_dict_nxt = {}
for k in dparams_dict_gr.keys():
    dparams = []
    jsn_param_nxt(gC[k], 'condition')
    if dparams != []:
        dparams_dict_nxt[k] = dparams

DF = pd.DataFrame(columns=['graph', 'button_group', 'id_button_group', 'button', 'id_button'])
for g in dparams_dict_gr.keys():
    for button in dparams_dict_nxt[g]:
        df = pd.DataFrame()
        df = pd.DataFrame({'graph': [g], 
                            'button_group': [dparams_dict_gr[g][0]['groupName']],
                            'id_button_group': [dparams_dict_gr[g][0]['id']],
                            'button': button[0], 
                            'id_button': button[1]})
        DF = pd.concat([DF, df],axis=0, ignore_index=True)

df_buttons = DF.copy()
df = pd.DataFrame(columns=['session_topic', 'len_topic', 'button_group', 'id_button_group', 'solution', 
                           'len', 'fullpath', 'level0', 'level1', 'level2', 'level3', 'level4', 
                           'graph', 'node', 'message'])

gC = jsndict['graphsContent']
for n in gC.keys():
    nodes = gC[n]['nodes'].keys()
    for n1 in nodes:
        nodes_n1 = gC[n]['nodes'][n1].keys()
        if ('actions' in nodes_n1) and ('execute' in nodes_n1):
            nodes_n1_act = gC[n]['nodes'][n1]['actions']
            nodes_n1_exec = gC[n]['nodes'][n1]['execute']
            button_group = '-'
            id_button_group = '-'
            if (nodes_n1_act != []) and (nodes_n1_exec != []):
                nodes_n1_mess = gC[n]['nodes'][n1]['actions'][0].keys()
                if 'messages' in nodes_n1_mess:
                    if len(nodes_n1_act) > 1:
                        for i in range(len(nodes_n1_act)):
                            if 'button_group' in nodes_n1_act[i]:
                                if nodes_n1_act[i]['button_group']['id'] not in [534, 707]:
                                    button_group = nodes_n1_act[i]['button_group']['groupName']
                                    id_button_group = nodes_n1_act[i]['button_group']['id']
                    solution = '_'
                    session_topic = '_'
                    for e in nodes_n1_exec:
                        if 'solution' in e: solution = e
                        if 'session_topic' in e: session_topic = e
                    graph = n
                    lnode = n1
                    message = gC[n]['nodes'][n1]['actions'][0]['messages'][0]
                    df = pd.concat([df, pd.DataFrame({'session_topic': [session_topic], 
                                                  'button_group': [button_group],
                                                  'id_button_group': [id_button_group],
                                                  'solution': [solution], 
                                                  'graph': [graph],
                                                  'node': [lnode],
                                                  'message': [message]})], 
                                                 axis=0, ignore_index=True)
                        
def extr(d):
    if d == '_': return d
    else: return d.split(',')[-1].strip()[1:-2]

df.session_topic = df.session_topic.apply(extr)
df.solution = df.solution.apply(extr)
df['len_topic'] = df.session_topic.str.len()

def jsn_param(d, node):
    global dparams
    if type(d) == dict:
        for k in d.keys():
            if k.startswith("Редирект"): 
                print(k)
                continue
            if k == node: dparams.append(d[k])
            jsn_param(d[k], node)


dparams_dict = {}
for graph in jsndict['graphs'].keys():
    dparams = []
    jsn_param(jsndict['graphsContent'][graph], 'sub_dialog')
    if dparams != []: dparams_dict[graph] = dparams

def fp(dparams_dict, df_graph_i):
    global one_path
    for dk in dparams_dict:
        if df_graph_i in dparams_dict[dk]:
            one_path.append(dk)
            fp(dparams_dict, dk)

for i, d in enumerate(df.graph):
    one_path = []
    fp(dparams_dict, d)
    df.at[i ,'fullpath'] = '\n'.join(one_path[::-1])
    if len(one_path) >= 1: 
        df.at[i ,'level0'] = one_path[::-1][0]
        if len(one_path) >= 2:
            df.at[i ,'level1'] = one_path[::-1][1]
            if len(one_path) >= 3:
                df.at[i ,'level2'] = one_path[::-1][2]
                if len(one_path) >= 4:
                    df.at[i ,'level3'] = one_path[::-1][3]
                    if len(one_path) >= 5:
                        df.at[i ,'level4'] = one_path[::-1][4]
    df.at[i ,'len'] = len(one_path)
    
df.fillna('(пусто)', inplace=True)

dfp = df[(df.len_topic!=1) & 
         (df.len_topic!=9) &
         (df.len_topic!=10)].pivot_table(index=['solution', 'level1', 'level2'], 
                                         values='session_topic', aggfunc='count')

with pd.ExcelWriter(r'C:\SEG\CB\18122023\chat_seller_bot_export(1).xlsx') as w:
    df.index.name = "#"
    df_buttons.index.name='#'
    df.to_excel(w, sheet_name='topics')
    dfp.to_excel(w, sheet_name='svod')
    df_buttons.to_excel(w, sheet_name='buttons')
